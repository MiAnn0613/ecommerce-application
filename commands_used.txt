

'''
https://techviewleo.com/how-to-install-grafana-on-amazon-linux/

'''








KUBERENETS

kubectl get all 
kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=<node>
kubectl describe deployments
kubectl get rs
Run kubectl get rs to see that the Deployment updated the Pods by creating a new ReplicaSet and scaling it up to 3 replicas, as well as scaling down the old ReplicaSet to 0 replicas.

kubectl apply -f deployments.yml --record=true
kubectl rollout status deployment auth-depl 
kubectl get svc servicename
kubectl describe svc servicename
kubectl rollout history deployment deploymentname
kubectl rollout undo deployment deploymentname

kubectl rollout restart deployment/frontend-depl 

kubectl get pv


kubectl get events --sort-by=.metadata.creationTimestam

kubectl get pvc 
kubectl delete pvc --all

kubectl get events


EKSCTL
sed -i .bak -e 's/v1alpha1/v1beta1/' ~/.kube/config
#https://stackoverflow.com/questions/71318743/kubectl-versions-error-exec-plugin-is-configured-to-use-api-version-client-auth



eksctl create cluster  \
--name web-cluster \
--version 1.21 \ 
--zones us-east-1a,us-east-1b,us-east-1c \
--nodegroup-name  linux-nodes \
--node-type t2.medium \
--instance-types t2.medium,t2.large
--nodes 2 \
--spot \
--nodes-min 2 \
--nodes-max 4 \
--ssh-access \
--enable-ssm 

=====

--dry-run
'''
eksctl create cluster  --zones us-east-1a,us-east-1b,us-east-1c \
--node-volume-size 16 \
--instance-types=t2.medium,t2.large,t3.medium \
--name web-clusterpub \
--version 1.21 \
--nodegroup-name  linux-nodes \
--nodes 3 \
--spot \
--nodes-min 1 \
--nodes-max 4 \
--ssh-access=true \
--enable-ssm \
--node-volume-type gp2 \
--ssh-public-key=eksctl_instance

'''
====
--tags stringToString   Used to tag the AWS resources. List of comma separated KV pairs "k1=v1,k2=v2" (default [])
--config-file string    load configuration from a file (or stdin if set to '-')
 --ssh-access                     control SSH access for nodes. Uses ~/.ssh/id_rsa.pub as default key path if enabled
--instance-selector-vcpus=2 \
--instance-selector-memory=4 \

====
eksctl create cluster 'sample-cluster' --zones us-east-1a,us-east-1b,us-east-1c

eksctl delete cluster --name web-cluster



WORKER NODE 

sudo kubeadm token create --print-join-command

#https://stackoverflow.com/questions/66213199/config-not-found-etc-kubernetes-admin-conf-after-setting-up-kubeadm-worker

kubectl get nodes --kubeconfig /etc/kubernetes/kubelet.conf

kubectl get pods --all-namespaces -o wide --field-selector spec.nodeName=<node>




ANSIBLE

https://medium.com/geekculture/how-to-deploy-the-kubernetes-application-to-aws-eks-using-terraform-and-ansible-7679a3a207a8


ansible-playbook -i ansible/hosts ansible/playbook_ec2_create.yml 

ansible-playbook -i ansible/hosts ansible/playbook_configuration_master.yml

ansible-playbook -i ansible/hosts ansible/playbook_configuration_worker.yml 


ansible-playbook -i ansible/hosts ansible/playbook_monitoring_all.yml 




PROMETHOUES

systemctl status prometheus
systemctl status grafana-server
systemctl status node-exporter



# GRAPHANA PORT --> 3000
# ADD DATASOURECE --> PROMETHOUES --> http://localhost:9090/

#1860 ID




LINUX

ps -aux | grep ubuntu


    NETWORK

netstat -pnlt | grep 6443
 sudo netstat -ltnp | grep -w '9090'









 =========

 ssh -i "eksctl_instance.pem" ec2-user@44.198.192.77 


 -- ssh -tt  -i "eksctl_instance.pem" ec2-user@44.198.192.77 'bash -s '<local.sh

ssh -i "eksctl_instance.pem"  ec2-user@ <<'ENDSSH'
#commands to run on remote host
ENDSSH



eksctl delete cluster --name web-clusterpub


 =========